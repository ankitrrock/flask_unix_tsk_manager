Task Manager API Documentation

This API allows you to manage tasks in a Unix-inspired fashion. You can create tasks, list all tasks, retrieve a task by ID, and delete tasks. All endpoints require an access token for authentication.

API Base URL
-------------
http://localhost:5000

Authentication
---------------
All requests must include an access token in the request payload:
- Key: access_token
- Value: mysecrettoken="0000"

If the token is missing or invalid, a 401 Unauthorized error will be returned.

Endpoints
---------

1. Create Task
   - Endpoint: POST /tasks
   - Description: Creates a new task. The task name is required.
   
   Request:
     - Content-Type: application/json
     - Body:
       {
         "access_token": "mysecrettoken",
         "name": "Sample Task"
       }
   
   Response:
     - Status: 201 Created
     - Body:
       {
         "id": 1,
         "name": "Sample Task",
         "status": "created",
         "created_at": "2024-04-21T12:00:00+00:00"
       }
   
   Error Responses:
     - 400 Bad Request if the name is missing:
       {
         "error": "Task name is required"
       }
     - 400 Bad Request if the request is not in JSON format:
       {
         "error": "Request must be in JSON format"
       }
     - 401 Unauthorized if the access token is invalid:
       {
         "error": "Invalid or missing access token"
       }

2. List Tasks
   - Endpoint: POST /tasks
   - Description: Retrieves a list of all tasks.
   
   Request:
     - Method: GET
     - Body:
       {
         "access_token": "mysecrettoken"
       }
   
   Response:
     - Status: 200 OK
     - Body:
       [
         {
           "id": 1,
           "name": "Sample Task",
           "status": "created",
           "created_at": "2024-04-21T12:00:00+00:00"
         },
         ...
       ]

3. Get Task by ID
   - Endpoint: GET /tasks/{task_id}
   - Description: Retrieves a task by its ID.
   
   Request:
     - Method: GET
     - Example: GET /tasks/1
     - Body:
       {
         "access_token": "mysecrettoken"
       }
   
   Response:
     - Status: 200 OK
     - Body:
       {
         "id": 1,
         "name": "Sample Task",
         "status": "created",
         "created_at": "2024-04-21T12:00:00+00:00"
       }
   
   Error Responses:
     - 404 Not Found if the task does not exist:
       {
         "error": "Task not found"
       }
     - 401 Unauthorized if the access token is invalid:
       {
         "error": "Invalid or missing access token"
       }

4. Delete Task by ID
   - Endpoint: DELETE /tasks/{task_id}
   - Description: Deletes a task by its ID.
   
   Request:
     - Method: DELETE
     - Example: DELETE /tasks/1
     - Body:
       {
         "access_token": "mysecrettoken"
       }
   
   Response:
     - Status: 200 OK
     - Body:
       {
         "message": "Task 1 deleted successfully"
       }
   
   Error Responses:
     - 404 Not Found if the task does not exist:
       {
         "error": "Task not found"
       }
     - 401 Unauthorized if the access token is invalid:
       {
         "error": "Invalid or missing access token"
       }

Error Handling
--------------
- 400 Bad Request – Returned when the client sends invalid data.
- 404 Not Found – Returned when the requested resource (task) doesn't exist.
- 401 Unauthorized – Returned when the access token is invalid.
- 500 Internal Server Error – Returned for unexpected server errors.

Example cURL Commands
----------------------

1. Create Task
   curl -X POST http://localhost:5000/tasks \
   -H "Content-Type: application/json" \
   -d '{"access_token": "mysecrettoken", "name": "Sample Task"}'

2. List Tasks
   curl -X GET http://localhost:5000/tasks \
   -H "Content-Type: application/json" \
   -d '{"access_token": "mysecrettoken"}'

3. Get Task by ID
   curl -X GET http://localhost:5000/tasks/1 \
   -H "Content-Type: application/json" \
   -d '{"access_token": "mysecrettoken"}'

4. Delete Task by ID
   curl -X DELETE http://localhost:5000/tasks/1 \
   -H "Content-Type: application/json" \
   -d '{"access_token": "mysecrettoken"}'

Model (Task)
-------------
The Task model in the application contains the following fields:
- id: Auto-generated unique identifier for the task (integer).
- name: Name of the task (string, required).
- status: Current status of the task (string, default: created).
- created_at: Timestamp of when the task was created (datetime, timezone-aware).
